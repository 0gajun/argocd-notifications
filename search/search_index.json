{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state. Using flexible mechanism of triggers and templates you can configure when the notification should be sent as well as notification content. Argo CD Notifications includes the set of useful built-in triggers and templates. So you can just enable them instead of reinventing new ones. Getting Started \u00b6 Install Argo CD Notifications kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/stable/manifests/install.yaml Configure integration with your Slack in argocd-notifications-secret secret: kubectl apply -f - << EOF apiVersion: v1 kind: Secret metadata: name: argocd-notifications-secret stringData: notifiers.yaml: | slack: token: <my-token> type: Opaque EOF Enable built-in trigger in the argocd-notifications-cm config map: kubectl apply -f - << EOF apiVersion: v1 kind: ConfigMap metadata: name: argocd-notifications-cm data: config.yaml: | triggers: - name: on-sync-succeeded enabled: true EOF Subscribe to notifications by adding the recipients.argocd-notifications.argoproj.io annotation to the Argo CD application or project: kubectl patch app <my-app> -p '{\"metadata\": {\"annotations\": {\"recipients.argocd-notifications.argoproj.io\":\"slack:<my-channel>\"}}}' --type merge Try syncing and application and get the notification once sync is completed.","title":"Overview"},{"location":"#overview","text":"Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state. Using flexible mechanism of triggers and templates you can configure when the notification should be sent as well as notification content. Argo CD Notifications includes the set of useful built-in triggers and templates. So you can just enable them instead of reinventing new ones.","title":"Overview"},{"location":"#getting-started","text":"Install Argo CD Notifications kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/stable/manifests/install.yaml Configure integration with your Slack in argocd-notifications-secret secret: kubectl apply -f - << EOF apiVersion: v1 kind: Secret metadata: name: argocd-notifications-secret stringData: notifiers.yaml: | slack: token: <my-token> type: Opaque EOF Enable built-in trigger in the argocd-notifications-cm config map: kubectl apply -f - << EOF apiVersion: v1 kind: ConfigMap metadata: name: argocd-notifications-cm data: config.yaml: | triggers: - name: on-sync-succeeded enabled: true EOF Subscribe to notifications by adding the recipients.argocd-notifications.argoproj.io annotation to the Argo CD application or project: kubectl patch app <my-app> -p '{\"metadata\": {\"annotations\": {\"recipients.argocd-notifications.argoproj.io\":\"slack:<my-channel>\"}}}' --type merge Try syncing and application and get the notification once sync is completed.","title":"Getting Started"},{"location":"built-in/","text":"Built-in Triggers and Templates \u00b6 Triggers \u00b6 NAME DESCRIPTION TEMPLATE on-sync-status-unknown Application status is 'Unknown' app-sync-status-unknown on-sync-failed Application syncing has failed app-sync-failed on-sync-running Application is being synced app-sync-running on-sync-succeeded Application syncing has succeeded app-sync-succeeded on-health-degraded Application has degraded app-health-degraded Templates \u00b6 app-sync-status-unknown \u00b6 title : Application {{.app.metadata.name}} sync status is 'Unknown' body : {{ if eq .context.notificationType \"slack\" }} :exclamation: {{ end }} Application {{ .app.metadata.name }} sync is 'Unknown'. Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} . {{ if ne .context.notificationType \"slack\" }} {{ range $ c := .app.status.conditions }} * {{ $ c.message }} {{ end }} {{ end }} app-sync-succeeded \u00b6 title : Application {{.app.metadata.name}} has been successfully synced. body : {{ if eq .context.notificationType \"slack\" }} :white_check_mark: {{ end }} Application {{ .app.metadata.name }} has been successfully synced at {{ .app.status.operationState.finishedAt }} . Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true . app-sync-failed \u00b6 title : Failed to sync application {{.app.metadata.name}}. body : {{ if eq .context.notificationType \"slack\" }} :exclamation: {{ end }} The sync operation of application {{ .app.metadata.name }} has failed at {{ .app.status.operationState.finishedAt }} with the following error: {{ .app.status.operationState.message }} Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true . app-sync-running \u00b6 title : Start syncing application {{.app.metadata.name}}. body : The sync operation of application {{ .app.metadata.name }} has started at {{ .app.status.operationState.startedAt }} . Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true . app-health-degraded \u00b6 title : Application {{.app.metadata.name}} has degraded. body : {{ if eq .context.notificationType \"slack\" }} :exclamation: {{ end }} Application {{ .app.metadata.name }} has degraded. Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} .","title":"Built-in Triggers and Templates"},{"location":"built-in/#built-in-triggers-and-templates","text":"","title":"Built-in Triggers and Templates"},{"location":"built-in/#triggers","text":"NAME DESCRIPTION TEMPLATE on-sync-status-unknown Application status is 'Unknown' app-sync-status-unknown on-sync-failed Application syncing has failed app-sync-failed on-sync-running Application is being synced app-sync-running on-sync-succeeded Application syncing has succeeded app-sync-succeeded on-health-degraded Application has degraded app-health-degraded","title":"Triggers"},{"location":"built-in/#templates","text":"","title":"Templates"},{"location":"built-in/#app-sync-status-unknown","text":"title : Application {{.app.metadata.name}} sync status is 'Unknown' body : {{ if eq .context.notificationType \"slack\" }} :exclamation: {{ end }} Application {{ .app.metadata.name }} sync is 'Unknown'. Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} . {{ if ne .context.notificationType \"slack\" }} {{ range $ c := .app.status.conditions }} * {{ $ c.message }} {{ end }} {{ end }}","title":"app-sync-status-unknown"},{"location":"built-in/#app-sync-succeeded","text":"title : Application {{.app.metadata.name}} has been successfully synced. body : {{ if eq .context.notificationType \"slack\" }} :white_check_mark: {{ end }} Application {{ .app.metadata.name }} has been successfully synced at {{ .app.status.operationState.finishedAt }} . Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true .","title":"app-sync-succeeded"},{"location":"built-in/#app-sync-failed","text":"title : Failed to sync application {{.app.metadata.name}}. body : {{ if eq .context.notificationType \"slack\" }} :exclamation: {{ end }} The sync operation of application {{ .app.metadata.name }} has failed at {{ .app.status.operationState.finishedAt }} with the following error: {{ .app.status.operationState.message }} Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true .","title":"app-sync-failed"},{"location":"built-in/#app-sync-running","text":"title : Start syncing application {{.app.metadata.name}}. body : The sync operation of application {{ .app.metadata.name }} has started at {{ .app.status.operationState.startedAt }} . Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true .","title":"app-sync-running"},{"location":"built-in/#app-health-degraded","text":"title : Application {{.app.metadata.name}} has degraded. body : {{ if eq .context.notificationType \"slack\" }} :exclamation: {{ end }} Application {{ .app.metadata.name }} has degraded. Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} .","title":"app-health-degraded"},{"location":"recipients/","text":"Recipients \u00b6 The list of recipients is not stored in a centralized configuration file. Instead, recipients might be configured using Application or AppProject CRD annotations. The example below demonstrates how to subscribe to the email notifications triggered for a specific application: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : annotations : recipients.argocd-notifications.argoproj.io : email:<sample-email> The example below demonstrates how to get to the Slack message on a notification of the any project application: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : annotations : recipients.argocd-notifications.argoproj.io : slack:<sample-channel-name> Each recipient is prefixed with the notification service type such as slack or email . Trigger Specific Subscription (v0.3) \u00b6 It is possible to subscribe recipient to a specific trigger instead of all triggers. The annotation key should be prefixed with <trigger-name>. . The example below demonstrates how to receive only on-sync-failed trigger notifications: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : annotations : on-sync-failed.recipients.argocd-notifications.argoproj.io : email:<sample-email>","title":"Recipients"},{"location":"recipients/#recipients","text":"The list of recipients is not stored in a centralized configuration file. Instead, recipients might be configured using Application or AppProject CRD annotations. The example below demonstrates how to subscribe to the email notifications triggered for a specific application: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : annotations : recipients.argocd-notifications.argoproj.io : email:<sample-email> The example below demonstrates how to get to the Slack message on a notification of the any project application: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : annotations : recipients.argocd-notifications.argoproj.io : slack:<sample-channel-name> Each recipient is prefixed with the notification service type such as slack or email .","title":"Recipients"},{"location":"recipients/#trigger-specific-subscription-v03","text":"It is possible to subscribe recipient to a specific trigger instead of all triggers. The annotation key should be prefixed with <trigger-name>. . The example below demonstrates how to receive only on-sync-failed trigger notifications: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : annotations : on-sync-failed.recipients.argocd-notifications.argoproj.io : email:<sample-email>","title":"Trigger Specific Subscription (v0.3)"},{"location":"services/opsgenie/","text":"Opsgenie \u00b6 Please add instructions if you are using Opsgenie.","title":"Opsgenie"},{"location":"services/opsgenie/#opsgenie","text":"Please add instructions if you are using Opsgenie.","title":"Opsgenie"},{"location":"services/overview/","text":"Notification Services \u00b6 The notification services are configured in the notifiers.yaml field of the argocd-notifications-secret.yaml Secret: apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : notifiers.yaml : | email: host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: <myemail>@gmail.com password: <mypassword> slack: token: <my-token> username: <override-username> # optional username opsgenie: apiUrl: api.opsgenie.com apiKeys: <team-id>: <my-api-key> ... type : Opaque","title":"Overview"},{"location":"services/overview/#notification-services","text":"The notification services are configured in the notifiers.yaml field of the argocd-notifications-secret.yaml Secret: apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : notifiers.yaml : | email: host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: <myemail>@gmail.com password: <mypassword> slack: token: <my-token> username: <override-username> # optional username opsgenie: apiUrl: api.opsgenie.com apiKeys: <team-id>: <my-api-key> ... type : Opaque","title":"Notification Services"},{"location":"services/slack/","text":"Slack \u00b6 Create Slack Application using https://api.slack.com/apps?new_app=1 Once application is created navigate to Enter OAuth & Permissions Click Permissions under Add features and functionality section and add chat:write:bot scope. Scroll back to the top, click 'Install App to Workspace' button and confirm the installation. Once installation is completed copy the OAuth token. Finally use the OAuth token to configure the slack integration in the argocd-notifications-secret secret: apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : notifiers.yaml : | email: host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: <myemail>@gmail.com password: <mypassword> slack: token: <my-token> username: <override-username> # optional username","title":"Slack"},{"location":"services/slack/#slack","text":"Create Slack Application using https://api.slack.com/apps?new_app=1 Once application is created navigate to Enter OAuth & Permissions Click Permissions under Add features and functionality section and add chat:write:bot scope. Scroll back to the top, click 'Install App to Workspace' button and confirm the installation. Once installation is completed copy the OAuth token. Finally use the OAuth token to configure the slack integration in the argocd-notifications-secret secret: apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : notifiers.yaml : | email: host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: <myemail>@gmail.com password: <mypassword> slack: token: <my-token> username: <override-username> # optional username","title":"Slack"},{"location":"triggers_and_templates/","text":"Overview \u00b6 Triggers and templates are configured in the config.yaml field of the argocd-notification-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : config.yaml : | triggers: - name: on-sync-status-unknown condition: app.status.sync.status == 'Unknown' template: app-sync-status enabled: true templates: - name: app-sync-status title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}} Triggers \u00b6 The trigger defines the condition when the notification should be sent. The definition includes name, condition and notification template reference. The following trigger sends a notification when application sync status changes to Unknown : - name: on-sync-status-unknown condition: app.status.sync.status == 'Unknown' template: app-sync-status enabled: true name - a unique trigger identifier. template - the name of the template that defines the notification content. condition - a predicate expression that returns true if the notification should be sent. The trigger condition evaluation is powered by antonmedv/expr . The condition language syntax is described at Language-Definition.md . enabled - flag that indicates if trigger is enabled or not. By default trigger is enabled. Functions (v0.5+) \u00b6 Following functions can be used with-in the condition expression: time.Now - executes function built-in Golang time.Now function. time.Parse - parses specified string using RFC3339 layout Templates \u00b6 The notification template is used to generate the notification content. The template is leveraging html/template golang package and allow to define notification title and body. The template is meant to be reusable and can be referenced by multiple triggers. The following template is used to notify the user about application sync status. - name: app-sync-status title: Application {{ .app.metadata.name }} sync status is {{ .app.status.sync.status }} body: | Application {{ .app.metadata.name }} sync is {{ .app.status.sync.status }} . Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} . Each template has access to the app and context fields: app holds the application object. context is user defined string map and might include any string keys and values.","title":"Overview"},{"location":"triggers_and_templates/#overview","text":"Triggers and templates are configured in the config.yaml field of the argocd-notification-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : config.yaml : | triggers: - name: on-sync-status-unknown condition: app.status.sync.status == 'Unknown' template: app-sync-status enabled: true templates: - name: app-sync-status title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}","title":"Overview"},{"location":"triggers_and_templates/#triggers","text":"The trigger defines the condition when the notification should be sent. The definition includes name, condition and notification template reference. The following trigger sends a notification when application sync status changes to Unknown : - name: on-sync-status-unknown condition: app.status.sync.status == 'Unknown' template: app-sync-status enabled: true name - a unique trigger identifier. template - the name of the template that defines the notification content. condition - a predicate expression that returns true if the notification should be sent. The trigger condition evaluation is powered by antonmedv/expr . The condition language syntax is described at Language-Definition.md . enabled - flag that indicates if trigger is enabled or not. By default trigger is enabled.","title":"Triggers"},{"location":"triggers_and_templates/#functions-v05","text":"Following functions can be used with-in the condition expression: time.Now - executes function built-in Golang time.Now function. time.Parse - parses specified string using RFC3339 layout","title":"Functions (v0.5+)"},{"location":"triggers_and_templates/#templates","text":"The notification template is used to generate the notification content. The template is leveraging html/template golang package and allow to define notification title and body. The template is meant to be reusable and can be referenced by multiple triggers. The following template is used to notify the user about application sync status. - name: app-sync-status title: Application {{ .app.metadata.name }} sync status is {{ .app.status.sync.status }} body: | Application {{ .app.metadata.name }} sync is {{ .app.status.sync.status }} . Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} . Each template has access to the app and context fields: app holds the application object. context is user defined string map and might include any string keys and values.","title":"Templates"},{"location":"triggers_and_templates/slack/","text":"Slack (v0.4.0+) \u00b6 Notification templates can be customized to leverage slack message blocks and attachments feature . The message blocks and attachments can be specified in blocks and attachments string fields under slack field: templates : - name : app-sync-status title : Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body : | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}. slack : attachments : | [{ \"title\": \"{{.app.metadata.name}}\", \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\", \"color\": \"#18be52\", \"fields\": [{ \"title\": \"Sync Status\", \"value\": \"{{.app.status.sync.status}}\", \"short\": true }, { \"title\": \"Repository\", \"value\": \"{{.app.spec.source.repoURL}}\", \"short\": true }] }]","title":"Slack (v0.4.0+)"},{"location":"triggers_and_templates/slack/#slack-v040","text":"Notification templates can be customized to leverage slack message blocks and attachments feature . The message blocks and attachments can be specified in blocks and attachments string fields under slack field: templates : - name : app-sync-status title : Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body : | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}. slack : attachments : | [{ \"title\": \"{{.app.metadata.name}}\", \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\", \"color\": \"#18be52\", \"fields\": [{ \"title\": \"Sync Status\", \"value\": \"{{.app.status.sync.status}}\", \"short\": true }, { \"title\": \"Repository\", \"value\": \"{{.app.spec.source.repoURL}}\", \"short\": true }] }]","title":"Slack (v0.4.0+)"}]}