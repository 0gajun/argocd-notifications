{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state. Using flexible mechanism of triggers and templates you can configure when the notification should be sent as well as notification content. Argo CD Notifications includes the set of useful built-in triggers and templates. So you can just enable them instead of reinventing new ones. Getting Started \u00b6 Install Argo CD Notifications kubectl apply - n argocd - f https : // raw . githubusercontent . com / alexmt / argocd - notifications / stable / manifests / install . yaml Configure integration with your Slack in argocd-notifications-secret secret: kubectl apply -f - << EOF apiVersion: v1 kind: Secret metadata: name: argocd-notifications-secret stringData: notifiers.yaml: | slack: token: <my-token> type: Opaque EOF Enable built-in trigger in the argocd-notifications-cm config map: kubectl apply -f - << EOF apiVersion: v1 kind: ConfigMap metadata: name: argocd-notifications-cm data: config.yaml: | triggers: - name: on-sync-succeeded enabled: true EOF Subscribe to notifications by adding the recipients.argocd-notifications.argoproj.io annotation to the Argo CD application or project: kubectl patch app <my-app> -p '{\"metadata\": {\"annotations\": {\"recipients.argocd-notifications.argoproj.io\":\"slack:<my-channel>\"}}}' --type merge Try syncing and application and get the notification once sync is completed.","title":"Overview"},{"location":"#overview","text":"Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state. Using flexible mechanism of triggers and templates you can configure when the notification should be sent as well as notification content. Argo CD Notifications includes the set of useful built-in triggers and templates. So you can just enable them instead of reinventing new ones.","title":"Overview"},{"location":"#getting-started","text":"Install Argo CD Notifications kubectl apply - n argocd - f https : // raw . githubusercontent . com / alexmt / argocd - notifications / stable / manifests / install . yaml Configure integration with your Slack in argocd-notifications-secret secret: kubectl apply -f - << EOF apiVersion: v1 kind: Secret metadata: name: argocd-notifications-secret stringData: notifiers.yaml: | slack: token: <my-token> type: Opaque EOF Enable built-in trigger in the argocd-notifications-cm config map: kubectl apply -f - << EOF apiVersion: v1 kind: ConfigMap metadata: name: argocd-notifications-cm data: config.yaml: | triggers: - name: on-sync-succeeded enabled: true EOF Subscribe to notifications by adding the recipients.argocd-notifications.argoproj.io annotation to the Argo CD application or project: kubectl patch app <my-app> -p '{\"metadata\": {\"annotations\": {\"recipients.argocd-notifications.argoproj.io\":\"slack:<my-channel>\"}}}' --type merge Try syncing and application and get the notification once sync is completed.","title":"Getting Started"},{"location":"built-in/","text":"Built-in Triggers and Templates [WIP] \u00b6 Triggers \u00b6 on-sync-status-unknown on-sync-failed on-sync-running on-sync-succeeded on-health-degraded Templates \u00b6 app-sync-status app-sync-succeeded app-sync-failed app-sync-running app-health-degraded","title":"Built-in Triggers and Templates [WIP]"},{"location":"built-in/#built-in-triggers-and-templates-wip","text":"","title":"Built-in Triggers and Templates [WIP]"},{"location":"built-in/#triggers","text":"on-sync-status-unknown on-sync-failed on-sync-running on-sync-succeeded on-health-degraded","title":"Triggers"},{"location":"built-in/#templates","text":"app-sync-status app-sync-succeeded app-sync-failed app-sync-running app-health-degraded","title":"Templates"},{"location":"recipients/","text":"Recipients \u00b6 The list of recipients is not stored in a centralized configuration file. Instead, recipients might be configured using Application or AppProject CRD annotations. The example below demonstrates how to subscribe to the email notifications triggered for a specific application: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : annotations : recipients.argocd-notifications.argoproj.io : email:<sample-email> The example below demonstrates how to get to the Slack message on a notification of the any project application: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : annotations : recipients.argocd-notifications.argoproj.io : slack:<sample-channel-name> Notification Services \u00b6 Each recipient is prefixed with the notification service type such as slack or email . The notification services are configured in the notifiers.yaml field of the argocd-notifications-secret.yaml Secret: apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : notifiers.yaml : | email: host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: <myemail>@gmail.com password: <mypassword> slack: token: <my-token> type : Opaque","title":"Recipients"},{"location":"recipients/#recipients","text":"The list of recipients is not stored in a centralized configuration file. Instead, recipients might be configured using Application or AppProject CRD annotations. The example below demonstrates how to subscribe to the email notifications triggered for a specific application: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : annotations : recipients.argocd-notifications.argoproj.io : email:<sample-email> The example below demonstrates how to get to the Slack message on a notification of the any project application: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : annotations : recipients.argocd-notifications.argoproj.io : slack:<sample-channel-name>","title":"Recipients"},{"location":"recipients/#notification-services","text":"Each recipient is prefixed with the notification service type such as slack or email . The notification services are configured in the notifiers.yaml field of the argocd-notifications-secret.yaml Secret: apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : notifiers.yaml : | email: host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: <myemail>@gmail.com password: <mypassword> slack: token: <my-token> type : Opaque","title":"Notification Services"},{"location":"triggers_and_templates/","text":"Triggers and Templates \u00b6 Triggers and templates are configured in the config.yaml field of the argocd-notification-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm data : config.yaml : | triggers: - name: on-sync-status-unknown condition: app.status.sync.status == 'Unknown' template: app-sync-status enabled: true templates: - name: app-sync-status title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}} Triggers \u00b6 The trigger defines the condition when the notification should be sent. The definition includes name, condition and notification template reference. The following trigger sends a notification when application sync status changes to Unknown : - name : on - sync - status - unknown condition : app . status . sync . status == 'Unknown' template : app - sync - status enabled : true name - a unique trigger identifier. template - the name of the template that defines the notification content. condition - a predicate expression that returns true if the notification should be sent. The trigger condition evaluation is powered by antonmedv/expr . The condition language syntax is described at Language-Definition.md . enabled - flag that indicates if trigger is enabled or not. By default trigger is enabled. Templates \u00b6 The notification template is used to generate the notification content. The template is leveraging html/template golang package and allow to define notification title and body. The template is meant to be reusable and can be referenced by multiple triggers. The following template is used to notify the user about application sync status. - name: app-sync-status title: Application {{ .app.metadata.name }} sync status is {{ .app.status.sync.status }} body: | Application {{ .app.metadata.name }} sync is {{ .app.status.sync.status }} . Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} . Each template has access to the app and context fields: app holds the application object. context is user defined string map and might include any string keys and values.","title":"Triggers and Templates"},{"location":"triggers_and_templates/#triggers-and-templates","text":"Triggers and templates are configured in the config.yaml field of the argocd-notification-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm data : config.yaml : | triggers: - name: on-sync-status-unknown condition: app.status.sync.status == 'Unknown' template: app-sync-status enabled: true templates: - name: app-sync-status title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}","title":"Triggers and Templates"},{"location":"triggers_and_templates/#triggers","text":"The trigger defines the condition when the notification should be sent. The definition includes name, condition and notification template reference. The following trigger sends a notification when application sync status changes to Unknown : - name : on - sync - status - unknown condition : app . status . sync . status == 'Unknown' template : app - sync - status enabled : true name - a unique trigger identifier. template - the name of the template that defines the notification content. condition - a predicate expression that returns true if the notification should be sent. The trigger condition evaluation is powered by antonmedv/expr . The condition language syntax is described at Language-Definition.md . enabled - flag that indicates if trigger is enabled or not. By default trigger is enabled.","title":"Triggers"},{"location":"triggers_and_templates/#templates","text":"The notification template is used to generate the notification content. The template is leveraging html/template golang package and allow to define notification title and body. The template is meant to be reusable and can be referenced by multiple triggers. The following template is used to notify the user about application sync status. - name: app-sync-status title: Application {{ .app.metadata.name }} sync status is {{ .app.status.sync.status }} body: | Application {{ .app.metadata.name }} sync is {{ .app.status.sync.status }} . Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} . Each template has access to the app and context fields: app holds the application object. context is user defined string map and might include any string keys and values.","title":"Templates"}]}